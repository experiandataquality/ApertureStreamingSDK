buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.3'
        classpath "com.palantir:jacoco-coverage:0.4.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

apply plugin: "org.sonarqube"

allprojects {
    group "com.experian.aperture.streaming"
    version semanticVersion

    apply plugin: "java"
    apply plugin: "checkstyle"
    apply plugin: 'jacoco'
    apply plugin: 'com.palantir.jacoco-full-report'

    jacoco {
        toolVersion = '0.8.5'
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test) {
        systemProperty "file.encoding", "UTF-8"
    }

    sourceCompatibility = 1.8

    //list of excluded classes from code coverage.
    project.ext.coverageExclusions = [
            "**/com/experian/aperture/streaming/client/Versions.java",
            "**/com/experian/aperture/streaming/client/Constants.java"
    ]

    jacocoTestReport {
        //exclude the classes from code coverage.
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: project.ext.coverageExclusions)
            })
        }
    }

    sonarqube {
        properties {
            property 'sonar.sourceEncoding', 'UTF-8'
            property 'sonar.java.coveragePlugin', 'jacoco'
            property "sonar.jacoco.reportPaths", "$project.buildDir/jacoco/test.exec"
            property "sonar.junit.reportsPath", "$project.buildDir/test-results/*.xml"
            property "sonar.coverage.exclusions", project.ext.coverageExclusions.join(",")
            property "sonar.exclusions", project.ext.sourceExclusions.join(",")
        }
    }

    checkstyle {
        toolVersion = "8.0"
        showViolations = true
        configFile = rootProject.file("config/checkstyle/checkstyle.xml")
        configProperties = [checkstyleSuppressionFile: rootProject.file("config/checkstyle/suppressions.xml")]
        reportsDir = file("$rootProject.buildDir/reports/checkstyle/$project.name")
        tasks.withType(Checkstyle) {
            reports {
                xml.enabled false
                html.enabled true
                html.stylesheet resources.text.fromFile("$rootProject.projectDir/config/checkstyle/xsl/checkstyle-noframes-severity-sorted.xsl")
            }
        }
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        implementation 'com.microsoft.signalr:signalr:3.0.0-preview-19075-0444'
        implementation 'org.slf4j:slf4j-jdk14:1.7.25'

        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.18.3'
        testCompile group: "org.unitils", name: "unitils-core", version: "3.4.6"
        testCompile group: "junit", name: "junit", version: "4.12"
        testCompile group: "uk.org.lidalia", name: "slf4j-test", version: "1.2.0"
        testCompile group: 'org.assertj', name: 'assertj-core', version: '3.8.0'
    }

    test {
        testLogging.showStandardStreams = true
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test.binResultsDir
}

subprojects {
    test {
        reports.html.enabled = false
        finalizedBy(testReport)

        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }
}

jar.enabled = false

task wrapper(type: Wrapper) {
    gradleVersion = "4.0"
}