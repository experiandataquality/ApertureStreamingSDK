<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    This configuration file was written by the eclipse-cs plugin configuration editor
-->
<module name="Checker">
    <module name="SuppressWithNearbyCommentFilter">
        <property name="commentFormat" value="CHECKSTYLE DISABLE ([\w\|]+) FOR (-?\d+) LINES"/>
        <property name="checkFormat" value="$1"/>
        <property name="influenceFormat" value="$2"/>
    </module>
    <module name="UniqueProperties">
        <!-- Checks properties files for duplicated properties.-->
        <property name="severity" value="error"/>
    </module>
    <module name="FileTabCharacter">
        <!-- Checks that there are no tab characters ('\t') in the source code-->
        <property name="eachLine" value="true"/>
        <property name="severity" value="error"/>
    </module>
    <module name="Translation">
        <!-- Ensures the correct translation of code by checking property files for consistency regarding their keys-->
        <property name="severity" value="error"/>
    </module>
    <property name="severity" value="error"/>
    <!-- Filter out Checkstyle warnings that have been suppressed with the @SuppressWarnings annotation -->
    <module name="SuppressWarningsFilter"/>
    <module name="TreeWalker">

        <module name="RedundantImport">
            <!-- Checks for redundant import statements. -->
            <property name="severity" value="error"/>
        </module>
        <module name="IllegalImport">
            <!-- Checks for illegal import statements (sun.* packages - not guaranteed to work on all Java-compatible platforms). -->
            <property name="severity" value="error"/>
        </module>
        <module name="UnusedImports">
            <!-- Checks for unused import statements. -->
            <property name="severity" value="error"/>
        </module>

        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocMethod">
            <property name="excludeScope" value="private"/>
            <property name="minLineCount" value="2"/>
            <property name="allowMissingPropertyJavadoc" value="true"/>
            <property name="tokens" value="METHOD_DEF,ANNOTATION_FIELD_DEF"/>

        </module>
        <module name="JavadocType">
            <property name="scope" value="public"/>
        </module>
        <module name="JavadocStyle"/>

        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="LocalFinalVariableName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>

        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="MethodLength"/>
        <module name="ParameterNumber"/>

        <!-- Checks for blocks.         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <!-- Checks for the placement of left curly braces ('{') for code blocks -->
        <module name="LeftCurly"/>
        <!-- Checks for braces around code blocks -->
        <module name="NeedBraces"/>
        <!-- Checks the placement of right curly braces ('}') for if-else, try-catch-finally blocks, while-loops, for-loops, method definitions, class definitions, constructor definitions, instance and static initialization blocks -->
        <module name="RightCurly"/>
        <!-- Checks that long constants are defined with an upper ell.-->
        <module name="UpperEll"/>
        <!-- Checks that there is only one statement per line. -->
        <module name="OneStatementPerLine"/>
        <!-- Checks that overload methods are grouped together -->
        <module name="OverloadMethodsDeclarationOrder"/>
        <!--  Checks that classes that override equals() also override hashCode()  -->
        <module name="EqualsHashCode"/>
        <!--  Avoid inner assignments  -->
        <module name="InnerAssignment"/>
        <!--  Require default clause in switch statements  -->
        <module name="MissingSwitchDefault"/>
        <!-- Ensure the default clause is the last case in a switch  -->
        <module name="DefaultComesLast"/>
        <!--  Avoid modifying control variables  -->
        <module name="ModifiedControlVariable"/>
        <!-- Checks that an overriding clone() method invokes super.clone() -->
        <module name="SuperClone"/>
        <!-- Checks that an overriding finalize() method invokes super.finalize()  -->
        <module name="SuperFinalize"/>
        <!--  Disallow catching exception base classes  -->
        <module name="IllegalCatch"/>
        <!--  Require all classes to be in a package  -->
        <module name="PackageDeclaration"/>
        <!--  Enforce the following declaration order:  -->
        <!--    1. Class variables     -->
        <!--    2. Instance variables  -->
        <!--    3. Ctors               -->
        <!--    4. Methods             -->
        <module name="DeclarationOrder"/>
        <!--  Disallow parameter assignment  -->
        <module name="ParameterAssignment"/>
        <!--  Avoid explicit initialization to the default value  -->
        <module name="ExplicitInitialization"/>
        <!--  Disallow non-commented switch fall through  -->
        <module name="FallThrough">
            <!-- Warn about falling through to the next case statement.  Similar to
            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment
            on the last non-blank line preceding the fallen-into case contains 'fall through' (or
            some other variants which we don't publicized to promote consistency).
            -->
            <property name="reliefPattern"
                      value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on"/>
            <property name="severity" value="error"/>
        </module>
        <!-- Magic number would not consider zero (0) as this is used for initialization on cycles. -->
        <module name="MagicNumber">
            <property name="tokens" value="NUM_DOUBLE, NUM_FLOAT"/>
            <property name="ignoreNumbers" value="0"/>
            <property name="severity" value="warning"/>
        </module>
        <!-- Checks for multiple occurrences of the same string literal within a single file -->
        <module name="MultipleStringLiterals">
            <property name="allowedDuplicates" value="3"/>
            <property name="severity" value="warning"/>
        </module>
        <!-- Checks that each variable declaration is in its own statement and on its own line. -->
        <module name="MultipleVariableDeclarations"/>
        <!--  Checks for the use of unnecessary parentheses  -->
        <module name="UnnecessaryParentheses"/>

        <!-- Checks for class design                         -->
        <!-- Checks that a class which has only private constructors is declared as final -->
        <module name="FinalClass"/>
        <!-- Makes sure that utility classes (classes that contain only static methods or fields in their API) do not have a public constructor. -->
        <module name="HideUtilityClassConstructor"/>
        <!-- Checks visibility of class members to enforce encapsulation. -->
        <module name="VisibilityModifier"/>
        <!--  Flag overly complex constructions  -->
        <module name="ClassFanOutComplexity">
            <property name="severity" value="error"/>
        </module>
        <module name="NPathComplexity">
            <property name="severity" value="warning"/>
        </module>
        <!--  Identify TODOs  -->
        <module name="TodoComment">
            <property name="format" value="(TODO|HACK|FIXME)"/>
            <property name="severity" value="info"/>
        </module>
        <!--  Array brackets on type not variable - String[] args not String args[]  -->
        <module name="ArrayTypeStyle">
            <property name="severity" value="error"/>
        </module>
        <!-- Check that parameters for methods, constructors, and catch blocks are final.-->
        <module name="FinalParameters">
            <property name="severity" value="error"/>
        </module>

        <module name="ModifierOrder">
            <!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and
                 8.4.3.  The prescribed order is:
                 public, protected, private, abstract, static, final, transient, volatile,
                 synchronized, native, strictfp
              -->
            <property name="severity" value="error"/>
        </module>
        <!-- Checks for redundant modifiers -->
        <module name="RedundantModifier">
            <property name="severity" value="error"/>
        </module>
        <!-- Checks that local variables that never have their values changed are declared final -->
        <module name="FinalLocalVariable">
            <property name="tokens" value="VARIABLE_DEF,PARAMETER_DEF"/>
            <property name="severity" value="warning"/>
        </module>

        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="GenericWhitespace"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>
        <module name="FileContentsHolder"/>
        <module name="AvoidNestedBlocks">
            <property name="severity" value="error"/>
        </module>
        <module name="EmptyBlock">
            <property name="severity" value="error"/>
        </module>
        <module name="CovariantEquals">
            <property name="severity" value="error"/>
        </module>
        <module name="EmptyStatement">
            <property name="severity" value="error"/>
        </module>
        <module name="IllegalInstantiation">
            <property name="severity" value="error"/>
            <property name="classes" value="Boolean"/>
        </module>
        <module name="IllegalThrows">
            <property name="severity" value="error"/>
        </module>
        <module name="NestedIfDepth">
            <property name="severity" value="error"/>
            <property name="max" value="2"/>
        </module>
        <module name="NestedTryDepth">
            <property name="severity" value="error"/>
            <property name="max" value="2"/>
        </module>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="MutableException">
            <property name="severity" value="error"/>
        </module>
        <module name="CyclomaticComplexity"/>
        <module name="ReturnCount">
            <property name="severity" value="error"/>
            <property name="max" value="5"/>
        </module>
        <module name="ThrowsCount">
            <property name="severity" value="warning"/>
            <property name="max" value="4"/>
        </module>
        <module name="MethodLength">
            <property name="max" value="100"/>
        </module>
        <module name="MethodLength">
            <property name="severity" value="warning"/>
            <property name="max" value="170"/>
        </module>
        <module name="BooleanExpressionComplexity">
            <property name="severity" value="warning"/>
            <property name="max" value="3"/>
        </module>
        <module name="LineLength">
            <property name="severity" value="ignore"/>
            <property name="max" value="120"/>
            <property name="tabWidth" value="3"/>
            <metadata name="com.atlassw.tools.eclipse.checkstyle.lastEnabledSeverity" value="error"/>
            <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
        </module>
        <module name="ParameterNumber">
            <property name="severity" value="warning"/>
            <property name="max" value="6"/>
        </module>
        <module name="ParameterNumber">
            <property name="severity" value="error"/>
            <property name="tokens" value="CTOR_DEF,METHOD_DEF"/>
        </module>
        <module name="AbstractClassName">
            <property name="ignoreModifier" value="false"/>
            <property name="ignoreName" value="true"/>
            <property name="format" value="^Abstract.*$"/>
        </module>
        <!-- Produces lots of errors in generated ViewConstants files
        <module name="ConstantName">
          <property name="severity" value="ignore"/>
          <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
        </module>
         -->
        <module name="LocalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
        </module>
        <module name="MethodName">
            <property name="severity" value="error"/>
            <property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
        </module>
        <!-- We don't use a DateHelper
        <module name="Regexp">
          <property name="severity" value="error"/>
          <property name="format" value="=\s*(DateUtil.*|DateUtils.*|new Date.*|Calendar.*|FastDateFormat.*|SimpleDateFormat.*)"/>
          <property name="message" value="You tried to assign a Date without using DateHelper!"/>
          <property name="illegalPattern" value="true"/>
        </module>
        -->
        <module name="Regexp">
            <property name="format" value="@Hidden.*[\n]?.*public[ ]*void[ ]*set"/>
            <property name="message"
                      value="@Hidden is useless on a setter. Did you mean to annotate @Disabled instead?"/>
            <property name="illegalPattern" value="true"/>
        </module>
        <module name="Regexp">
            <property name="format" value="@Disabled.*[\n]?.*public.*get"/>
            <property name="message"
                      value="@Disabled is useless on a getter. Did you mean to annotate @Hidden instead?"/>
            <property name="illegalPattern" value="true"/>
        </module>
        <!-- Make the @SuppressWarnings annotations available to Checkstyle -->
        <module name="SuppressWarningsHolder"/>
    </module>
    <module name="FileLength">
        <property name="severity" value="warning"/>
        <property name="max" value="300"/>
    </module>
    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="CHECKSTYLE_OFF\: ([\w\|]+)"/>
        <property name="onCommentFormat" value="CHECKSTYLE_ON\: ([\w\|]+)"/>
    </module>
    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="CSOFF\: ([\w\|]+)"/> 
        <property name="onCommentFormat" value="CSON\: ([\w\|]+)"/>
        <property name="checkFormat" value="$1"/>
    </module>
    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="(Generated)|(GENERATED)|(generated)"/>
        <property name="onCommentFormat" value="CSON\: ([\w\|]+)"/>
    </module>
    <module name="SuppressionFilter">
        <property name="file" value="${checkstyleSuppressionFile}"/>
    </module>
</module>